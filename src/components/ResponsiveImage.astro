---
/**
 * Componente ResponsiveImage
 * 
 * Um componente avançado para exibir imagens responsivas com lazy loading e otimização para SEO.
 * Suporta imagens locais e remotas, formatos modernos (webp, avif) e placeholders.
 * Refatorado para usar a tag <Image> do Astro.
 */
import { Image } from 'astro:assets';

// Função movida de imageUtils.ts, já que o arquivo foi removido
const isExternalImage = (src: string): boolean => {
  return typeof src === 'string' && src?.startsWith('http');
};

interface Props {
  src: string | ImageMetadata | Promise<{ default: ImageMetadata }>;
  alt: string;
  width?: number;
  height?: number;
  sizes?: string; // Para o atributo sizes da tag img
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  // pictureClass e aspectRatio podem ser controlados via classes CSS ou style na tag Image
  // objectFit é uma propriedade da tag Image
  // background e usePlaceholder não são diretamente suportados pela tag Image, 
  // mas placeholders podem ser feitos com `astro:assets` e CSS.
  // Para simplificar, vamos remover background e usePlaceholder por enquanto
  // ou o usuário pode implementar wrappers se necessário.
  format?: 'webp' | 'avif' | 'jpeg' | 'png' | 'svg';
  quality?: number | 'low' | 'mid' | 'high' | 'max';
  densities?: (number | `${number}x`)[];
  widths?: (number | `${number}w`)[];
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
}

const {
  src,
  alt,
  width,
  height,
  sizes,
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  class: className,
  format,
  quality,
  densities,
  widths,
  objectFit = 'cover' // Default object-fit, pode ser sobrescrito
} = Astro.props;

const isExternal = isExternalImage(src as string);

// A lógica de placeholder e aspectRatio precisaria ser reimplementada
// de forma diferente se desejado com a tag <Image>.
// Por ora, focaremos na funcionalidade principal da imagem.

---

{isExternal ? (
  <img
    src={src as string}
    alt={alt}
    width={width}
    height={height}
    class:list={[className, objectFit ? `object-${objectFit}` : '']}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    style={{ objectFit: objectFit }} // Adiciona object-fit diretamente se necessário
  />
) : (
  <Image
    src={src as ImageMetadata | Promise<{ default: ImageMetadata }>} 
    alt={alt}
    width={width}
    height={height}
    format={format}
    quality={quality}
    class:list={[className]}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    densities={densities}
    widths={widths}
    sizes={sizes}
    style={{ objectFit: objectFit }} // Passa object-fit para a tag Image
  />
)}

<!-- 
  A estilização de loading e o script de detecção de carregamento 
  podem precisar de ajustes ou podem ser tratados de forma diferente 
  com a tag <Image> do Astro, que já lida com lazy loading. 
  Para simplificar, o script e o estilo de loading foram removidos.
  Considere usar as capacidades nativas do Astro ou bibliotecas de terceiros 
  para efeitos de loading mais avançados se necessário.
-->