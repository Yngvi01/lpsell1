---
// Componente para otimização de imagens
// Utiliza a tag <Image> do Astro para otimizar automaticamente as imagens
import { Image } from 'astro:assets';

interface Props {
  src: string | ImageMetadata | Promise<{ default: ImageMetadata }>; // Permite string para imagens externas ou ImageMetadata para locais
  alt: string;
  width?: number;
  height?: number;
  format?: 'webp' | 'avif' | 'jpeg' | 'png' | 'svg';
  quality?: number | 'low' | 'mid' | 'high' | 'max';
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
  // Adicionando a propriedade densities para controle mais fino do srcset
  densities?: (number | `${number}x`)[];
  // Adicionando a propriedade widths para controle de tamanhos no srcset
  widths?: (number | `${number}w`)[];
  // Adicionando a propriedade sizes para o atributo sizes da tag img
  sizes?: string;
}

const {
  src,
  alt,
  width,
  height,
  format,
  quality,
  class: className,
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  densities,
  widths,
  sizes
} = Astro.props;

// Verifica se a imagem é externa (começa com http ou https)
const isExternalImage = typeof src === 'string' && src.startsWith('http');
---

{isExternalImage ? (
  <img
    src={src as string} // Cast para string, pois já verificamos
    alt={alt}
    width={width}
    height={height}
    class:list={[className]}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
  />
) : (
  <Image
    src={src as ImageMetadata | Promise<{ default: ImageMetadata }>} // Cast para o tipo esperado pelo Astro Image
    alt={alt}
    width={width}
    height={height}
    format={format}
    quality={quality}
    class:list={[className]}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    densities={densities}
    widths={widths}
    sizes={sizes}
  />
)}